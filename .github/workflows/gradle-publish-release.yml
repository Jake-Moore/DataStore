# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Gradle Publish (on push)

on:
  push:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: write # Access to Publish a Release
      packages: write # Access to Publish a Package

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Extract Version from Gradle
      id: extract_version
      run: |
        gradle clean
        version=$(gradle properties -q | grep "^version:" | awk '{print $2}')
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Publish with Gradle
      if: "!endsWith(steps.extract_version.outputs.version, 'SNAPSHOT')"
      run: gradle publish
      env:
        LUXIOUS_NEXUS_USER: ${{ secrets.LUXIOUS_NEXUS_USER }}
        LUXIOUS_NEXUS_PASS: ${{ secrets.LUXIOUS_NEXUS_PASS }}

    #--------------------------------------------------------------------------------------------
    #           Create a Github Release
    #--------------------------------------------------------------------------------------------

    - name: Display Version
      if: "!endsWith(steps.extract_version.outputs.version, 'SNAPSHOT')"
      run: echo "Version is ${{ steps.extract_version.outputs.version }}"

    - name: Create Release (Spigot Jar + Module Jars)
      if: "!endsWith(steps.extract_version.outputs.version, 'SNAPSHOT')"
      uses: ncipollo/release-action@v1
      with:
        artifacts: "build/libs/*.jar"
        allowUpdates: true
        removeArtifacts: true
        omitBodyDuringUpdate: true
        omitDraftDuringUpdate: true
        omitNameDuringUpdate: true
        omitPrereleaseDuringUpdate: true
        tag: "${{ steps.extract_version.outputs.version }}"

